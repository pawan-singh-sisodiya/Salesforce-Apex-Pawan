

Insert JSON into Product2 Description Field, After Insertion of JSON Fire Trigger and create records(insert records)
Parse JSON using trigger->  
  
  -----------------------------------------------------------------------------------------------------------
  
  [
	{
		"Name__c": "Big Boss1",
		"Phone__c":"12345",
		"UniqueId__c":"1"
	},
	{
		"Name__c":"Khatron ke khiladi1",
		"Phone__c":"56789",
		"UniqueId__c":"2"
	},
	{
		"Name__c":"Coffee with karan1",
		"Phone__c":"123456",
		"UniqueId__c":"3"
	},
	{
		"Name__c":"The Kapil sharma Show1",
		"Phone__c":"56789",
		"UniqueId__c":"4"
	}
]

   -----------------------------------------------------------------------------------------------------------
   
   There are two ways to create records 
                                      1. Static -
									             With Wrapper class
									  2. Dynamic -
									             With Custom MetaData
												 
   -----------------------------------------------------------------------------------------------------------

trigger ProductWithJSON on Product2 (after insert) {

    if(Trigger.isInsert && Trigger.isAfter){
        ProductWithJSONHelper.beforeInsertMethod(Trigger.New);
    }
}


///////////////////////////////////////////////// Trigger With Custom Meta Data /////////////////////////////////////////////////


public class ProductWithJSONHelper {
    
    public static void beforeInsertMethod(List<Product2> productRecords){
        List<Id> productIds = new List<Id>();
        List<ProductForJSON__mdt> productItem = new  List<ProductForJSON__mdt>();
        List<Product_item__c> items = new List<Product_item__c>();
        for(Product2 pr: productRecords){
            productIds.add(pr.Id);
            productItem =  (List<ProductForJSON__mdt>)System.JSON.deserialize(pr.Description,  List<ProductForJSON__mdt>.class);
            System.debug('productItems after JSON deserialize' + productItem);
        }
        
        for(ProductForJSON__mdt wp: productItem){
            for(Product2 product: productRecords){
               Product_item__c obj = new Product_item__c();
                obj.Product_Name__c = product.Id;
                obj.Name = wp.Name__c;
                obj.Phone__c = wp.Phone__c;
                obj.UniqueId__c = wp.UniqueId__c;
                items.add(obj);
                
                System.debug('items list -- '+ items);
            }
            // items.add(new Product_item__c(Name = wp.ProductName, Phone__c = wp.ProductPhone, UniqueId__c = wp.UniqueId));
        }
        
        if(items.size()>0){
            INSERT items;
        } 
        
    }
}

///////////////////////////////////////////////// Trigger With Wrapper Class  /////////////////////////////////////////////////

public class ProductWithJSONHelper {

    public static void beforeInsertMethod(List<Product2> productRecords){
        
         List<ProductWrapper> productItem = new  List<ProductWrapper>();
        List<Product_item__c> items = new List<Product_item__c>();
        for(Product2 pr: productRecords){
            productItem =  (List<ProductWrapper>)System.JSON.deserialize(pr.Description,  List<ProductWrapper>.class);
        }
        
        for(ProductWrapper wp: productItem){
            
            Product_item__c obj = new Product_item__c();
            obj.Name = wp.ProductName;
                obj.Phone__c = wp.ProductPhone;
                obj.UniqueId__c = wp.UniqueId;
                items.add(obj);
                   // items.add(new Product_item__c(Name = wp.ProductName, Phone__c = wp.ProductPhone, UniqueId__c = wp.UniqueId));
        }
        
        if(items.size()>0){
            INSERT items;
        } 

    }
    
    public class ProductWrapper{
        public String ProductName{get;set;}
        public String ProductPhone{get;set;}
        public Integer UniqueId{get;set;}
    }
}